// Code generated by protoc-gen-gogo.
// source: cockroach/pkg/storage/api.proto
// DO NOT EDIT!

/*
	Package storage is a generated protocol buffer package.

	It is generated from these files:
		cockroach/pkg/storage/api.proto
		cockroach/pkg/storage/liveness.proto
		cockroach/pkg/storage/raft.proto

	It has these top-level messages:
		StoreRequestHeader
		PollFrozenRequest
		PollFrozenResponse
		ReservationRequest
		ReservationResponse
		CollectChecksumRequest
		CollectChecksumResponse
		Liveness
		RaftHeartbeat
		RaftMessageRequest
		RaftMessageRequestBatch
		RaftMessageResponseUnion
		RaftMessageResponse
		SnapshotRequest
		SnapshotResponse
		ConfChangeContext
*/
package storage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cockroach_roachpb1 "github.com/cockroachdb/cockroach/pkg/roachpb"
import cockroach_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
import github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StoreRequestHeader locates a Store on a Node.
type StoreRequestHeader struct {
	NodeID  github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
}

func (m *StoreRequestHeader) Reset()                    { *m = StoreRequestHeader{} }
func (m *StoreRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*StoreRequestHeader) ProtoMessage()               {}
func (*StoreRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// A PollFrozenRequest asks the addressed Store for its frozen or thawed
// Replicas.
type PollFrozenRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	// When true, collect the frozen Replicas, and the thawed ones otherwise.
	CollectFrozen bool `protobuf:"varint,2,opt,name=collect_frozen,json=collectFrozen,proto3" json:"collect_frozen,omitempty"`
}

func (m *PollFrozenRequest) Reset()                    { *m = PollFrozenRequest{} }
func (m *PollFrozenRequest) String() string            { return proto.CompactTextString(m) }
func (*PollFrozenRequest) ProtoMessage()               {}
func (*PollFrozenRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

// A PollFrozenResponse is the response returned from a PollFrozenRequest.
type PollFrozenResponse struct {
	Results []cockroach_roachpb.ReplicaDescriptor `protobuf:"bytes,1,rep,name=results" json:"results"`
}

func (m *PollFrozenResponse) Reset()                    { *m = PollFrozenResponse{} }
func (m *PollFrozenResponse) String() string            { return proto.CompactTextString(m) }
func (*PollFrozenResponse) ProtoMessage()               {}
func (*PollFrozenResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

// A ReservationRequest asks the addressed Store to reserve the space for a new
// replica for the Range of RangeID reserving RangeSize bytes.
type ReservationRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	FromNodeID         github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,2,opt,name=from_node_id,json=fromNodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"from_node_id,omitempty"`
	FromStoreID        github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,3,opt,name=from_store_id,json=fromStoreId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"from_store_id,omitempty"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,4,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	RangeSize          int64                                                `protobuf:"varint,5,opt,name=range_size,json=rangeSize,proto3" json:"range_size,omitempty"`
}

func (m *ReservationRequest) Reset()                    { *m = ReservationRequest{} }
func (m *ReservationRequest) String() string            { return proto.CompactTextString(m) }
func (*ReservationRequest) ProtoMessage()               {}
func (*ReservationRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

// A ReservationResponse is the response returned from a ReservationRequest.
type ReservationResponse struct {
	Reserved bool `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// The current number of ranges and reservations on the target
	// store. This is returned even if the reservation isn't filled.
	RangeCount int32 `protobuf:"varint,2,opt,name=range_count,json=rangeCount,proto3" json:"range_count,omitempty"`
}

func (m *ReservationResponse) Reset()                    { *m = ReservationResponse{} }
func (m *ReservationResponse) String() string            { return proto.CompactTextString(m) }
func (*ReservationResponse) ProtoMessage()               {}
func (*ReservationResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

// A CollectChecksumRequest asks the addressed replica for the result of a
// roachpb.ComputeChecksumRequest.
type CollectChecksumRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// checksum_id identifies the corresponding roachpb.ComputeChecksumRequest.
	ChecksumID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,3,opt,name=checksum_id,json=checksumId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"checksum_id"`
	Checksum   []byte                                              `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *CollectChecksumRequest) Reset()                    { *m = CollectChecksumRequest{} }
func (m *CollectChecksumRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectChecksumRequest) ProtoMessage()               {}
func (*CollectChecksumRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type CollectChecksumResponse struct {
	Checksum []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// snapshot is set if the roachpb.ComputeChecksumRequest had snapshot = true
	// and the response checksum is different from the request checksum.
	Snapshot *cockroach_roachpb1.RaftSnapshotData `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
}

func (m *CollectChecksumResponse) Reset()                    { *m = CollectChecksumResponse{} }
func (m *CollectChecksumResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectChecksumResponse) ProtoMessage()               {}
func (*CollectChecksumResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func init() {
	proto.RegisterType((*StoreRequestHeader)(nil), "cockroach.storage.StoreRequestHeader")
	proto.RegisterType((*PollFrozenRequest)(nil), "cockroach.storage.PollFrozenRequest")
	proto.RegisterType((*PollFrozenResponse)(nil), "cockroach.storage.PollFrozenResponse")
	proto.RegisterType((*ReservationRequest)(nil), "cockroach.storage.ReservationRequest")
	proto.RegisterType((*ReservationResponse)(nil), "cockroach.storage.ReservationResponse")
	proto.RegisterType((*CollectChecksumRequest)(nil), "cockroach.storage.CollectChecksumRequest")
	proto.RegisterType((*CollectChecksumResponse)(nil), "cockroach.storage.CollectChecksumResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Freeze service

type FreezeClient interface {
	PollFrozen(ctx context.Context, in *PollFrozenRequest, opts ...grpc.CallOption) (*PollFrozenResponse, error)
}

type freezeClient struct {
	cc *grpc.ClientConn
}

func NewFreezeClient(cc *grpc.ClientConn) FreezeClient {
	return &freezeClient{cc}
}

func (c *freezeClient) PollFrozen(ctx context.Context, in *PollFrozenRequest, opts ...grpc.CallOption) (*PollFrozenResponse, error) {
	out := new(PollFrozenResponse)
	err := grpc.Invoke(ctx, "/cockroach.storage.Freeze/PollFrozen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Freeze service

type FreezeServer interface {
	PollFrozen(context.Context, *PollFrozenRequest) (*PollFrozenResponse, error)
}

func RegisterFreezeServer(s *grpc.Server, srv FreezeServer) {
	s.RegisterService(&_Freeze_serviceDesc, srv)
}

func _Freeze_PollFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollFrozenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreezeServer).PollFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.Freeze/PollFrozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreezeServer).PollFrozen(ctx, req.(*PollFrozenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Freeze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.Freeze",
	HandlerType: (*FreezeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollFrozen",
			Handler:    _Freeze_PollFrozen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorApi,
}

// Client API for Reservation service

type ReservationClient interface {
	Reserve(ctx context.Context, in *ReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
}

type reservationClient struct {
	cc *grpc.ClientConn
}

func NewReservationClient(cc *grpc.ClientConn) ReservationClient {
	return &reservationClient{cc}
}

func (c *reservationClient) Reserve(ctx context.Context, in *ReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	out := new(ReservationResponse)
	err := grpc.Invoke(ctx, "/cockroach.storage.Reservation/Reserve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reservation service

type ReservationServer interface {
	Reserve(context.Context, *ReservationRequest) (*ReservationResponse, error)
}

func RegisterReservationServer(s *grpc.Server, srv ReservationServer) {
	s.RegisterService(&_Reservation_serviceDesc, srv)
}

func _Reservation_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.Reservation/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Reserve(ctx, req.(*ReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reservation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.Reservation",
	HandlerType: (*ReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _Reservation_Reserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorApi,
}

// Client API for Consistency service

type ConsistencyClient interface {
	CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error)
}

type consistencyClient struct {
	cc *grpc.ClientConn
}

func NewConsistencyClient(cc *grpc.ClientConn) ConsistencyClient {
	return &consistencyClient{cc}
}

func (c *consistencyClient) CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error) {
	out := new(CollectChecksumResponse)
	err := grpc.Invoke(ctx, "/cockroach.storage.Consistency/CollectChecksum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consistency service

type ConsistencyServer interface {
	CollectChecksum(context.Context, *CollectChecksumRequest) (*CollectChecksumResponse, error)
}

func RegisterConsistencyServer(s *grpc.Server, srv ConsistencyServer) {
	s.RegisterService(&_Consistency_serviceDesc, srv)
}

func _Consistency_CollectChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistencyServer).CollectChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.Consistency/CollectChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistencyServer).CollectChecksum(ctx, req.(*CollectChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consistency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.Consistency",
	HandlerType: (*ConsistencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectChecksum",
			Handler:    _Consistency_CollectChecksum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorApi,
}

func (m *StoreRequestHeader) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StoreRequestHeader) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintApi(data, i, uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintApi(data, i, uint64(m.StoreID))
	}
	return i, nil
}

func (m *PollFrozenRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PollFrozenRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintApi(data, i, uint64(m.StoreRequestHeader.Size()))
	n1, err := m.StoreRequestHeader.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.CollectFrozen {
		data[i] = 0x10
		i++
		if m.CollectFrozen {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PollFrozenResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PollFrozenResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			data[i] = 0xa
			i++
			i = encodeVarintApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReservationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReservationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintApi(data, i, uint64(m.StoreRequestHeader.Size()))
	n2, err := m.StoreRequestHeader.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.FromNodeID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintApi(data, i, uint64(m.FromNodeID))
	}
	if m.FromStoreID != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintApi(data, i, uint64(m.FromStoreID))
	}
	if m.RangeID != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintApi(data, i, uint64(m.RangeID))
	}
	if m.RangeSize != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintApi(data, i, uint64(m.RangeSize))
	}
	return i, nil
}

func (m *ReservationResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReservationResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reserved {
		data[i] = 0x8
		i++
		if m.Reserved {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.RangeCount != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintApi(data, i, uint64(m.RangeCount))
	}
	return i, nil
}

func (m *CollectChecksumRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CollectChecksumRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintApi(data, i, uint64(m.StoreRequestHeader.Size()))
	n3, err := m.StoreRequestHeader.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.RangeID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintApi(data, i, uint64(m.RangeID))
	}
	data[i] = 0x1a
	i++
	i = encodeVarintApi(data, i, uint64(m.ChecksumID.Size()))
	n4, err := m.ChecksumID.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Checksum) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintApi(data, i, uint64(len(m.Checksum)))
		i += copy(data[i:], m.Checksum)
	}
	return i, nil
}

func (m *CollectChecksumResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CollectChecksumResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApi(data, i, uint64(len(m.Checksum)))
		i += copy(data[i:], m.Checksum)
	}
	if m.Snapshot != nil {
		data[i] = 0x12
		i++
		i = encodeVarintApi(data, i, uint64(m.Snapshot.Size()))
		n5, err := m.Snapshot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Api(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *StoreRequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovApi(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovApi(uint64(m.StoreID))
	}
	return n
}

func (m *PollFrozenRequest) Size() (n int) {
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.CollectFrozen {
		n += 2
	}
	return n
}

func (m *PollFrozenResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ReservationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.FromNodeID != 0 {
		n += 1 + sovApi(uint64(m.FromNodeID))
	}
	if m.FromStoreID != 0 {
		n += 1 + sovApi(uint64(m.FromStoreID))
	}
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	if m.RangeSize != 0 {
		n += 1 + sovApi(uint64(m.RangeSize))
	}
	return n
}

func (m *ReservationResponse) Size() (n int) {
	var l int
	_ = l
	if m.Reserved {
		n += 2
	}
	if m.RangeCount != 0 {
		n += 1 + sovApi(uint64(m.RangeCount))
	}
	return n
}

func (m *CollectChecksumRequest) Size() (n int) {
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	l = m.ChecksumID.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CollectChecksumResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreRequestHeader) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StoreID |= (github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollFrozenRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollFrozenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollFrozenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectFrozen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollFrozenResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollFrozenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollFrozenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, cockroach_roachpb.ReplicaDescriptor{})
			if err := m.Results[len(m.Results)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromNodeID", wireType)
			}
			m.FromNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FromNodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromStoreID", wireType)
			}
			m.FromStoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FromStoreID |= (github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RangeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeSize", wireType)
			}
			m.RangeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RangeSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservationResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reserved = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RangeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RangeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChecksumID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], data[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], data[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &cockroach_roachpb1.RaftSnapshotData{}
			}
			if err := m.Snapshot.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cockroach/pkg/storage/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x9b, 0x36, 0xc9, 0x3d, 0x6e, 0xef, 0x55, 0xe7, 0x5e, 0x5d, 0xaa, 0x48, 0xc4, 0xc5,
	0xb4, 0xa8, 0x65, 0x11, 0x4b, 0x29, 0x7b, 0x44, 0x12, 0x5a, 0xb2, 0x41, 0x68, 0xaa, 0x6e, 0x8a,
	0x44, 0x34, 0xb1, 0x27, 0x89, 0x1b, 0xc7, 0x63, 0xc6, 0xe3, 0x4a, 0xcd, 0x96, 0x17, 0xe0, 0x59,
	0x78, 0x8a, 0xb2, 0xeb, 0x12, 0xb1, 0x88, 0xc0, 0xbc, 0x05, 0x2b, 0xe4, 0x19, 0xdb, 0x4d, 0x49,
	0xa4, 0x16, 0x5a, 0x76, 0x33, 0x27, 0xe7, 0xfb, 0xbe, 0xf3, 0xf3, 0x79, 0x02, 0x86, 0xcd, 0xec,
	0x11, 0x67, 0xc4, 0x1e, 0x5a, 0xc1, 0x68, 0x60, 0x85, 0x82, 0x71, 0x32, 0xa0, 0x16, 0x09, 0xdc,
	0x7a, 0xc0, 0x99, 0x60, 0x68, 0x3d, 0x4f, 0xa8, 0xa7, 0x3f, 0x56, 0x77, 0xaf, 0x62, 0xe4, 0x29,
	0xe8, 0x59, 0xae, 0x2f, 0x28, 0xf7, 0x89, 0xd7, 0xe5, 0xa4, 0x2f, 0x14, 0xba, 0xba, 0xb5, 0x38,
	0x75, 0x4c, 0x05, 0x71, 0x88, 0x20, 0x69, 0xd6, 0x7f, 0x03, 0x36, 0x60, 0xf2, 0x68, 0x25, 0x27,
	0x15, 0x35, 0x2f, 0x34, 0x40, 0x87, 0x82, 0x71, 0x8a, 0xe9, 0xdb, 0x88, 0x86, 0xe2, 0x05, 0x25,
	0x0e, 0xe5, 0xe8, 0x18, 0xca, 0x3e, 0x73, 0x68, 0xd7, 0x75, 0x36, 0xb4, 0x4d, 0x6d, 0x67, 0xa5,
	0xf9, 0x2c, 0x9e, 0x1a, 0xa5, 0x97, 0xcc, 0xa1, 0x9d, 0xf6, 0xf7, 0xa9, 0xb1, 0x37, 0x70, 0xc5,
	0x30, 0xea, 0xd5, 0x6d, 0x36, 0xb6, 0x72, 0x71, 0xa7, 0x67, 0x2d, 0x2c, 0xa4, 0xae, 0x60, 0xb8,
	0x94, 0x30, 0x76, 0x1c, 0xf4, 0x06, 0x2a, 0x49, 0x93, 0x92, 0x7c, 0x49, 0x92, 0xb7, 0xe2, 0xa9,
	0x51, 0x96, 0x55, 0x48, 0xf6, 0x27, 0xbf, 0xc4, 0x9e, 0xe2, 0x70, 0x59, 0x92, 0x76, 0x1c, 0xf3,
	0x9d, 0x06, 0xeb, 0xaf, 0x98, 0xe7, 0xed, 0x73, 0x36, 0xa1, 0x7e, 0xda, 0x17, 0x3a, 0x80, 0xd2,
	0x50, 0xf6, 0x26, 0x1b, 0xd2, 0x1b, 0xdb, 0xf5, 0xb9, 0x99, 0xd7, 0xe7, 0x07, 0xd1, 0xac, 0x9c,
	0x4f, 0x8d, 0xc2, 0xc5, 0xd4, 0xd0, 0x70, 0x0a, 0x47, 0xdb, 0xf0, 0xb7, 0xcd, 0x3c, 0x8f, 0xda,
	0xa2, 0xdb, 0x97, 0x0a, 0xb2, 0x89, 0x0a, 0x5e, 0x4b, 0xa3, 0x4a, 0xd6, 0x3c, 0x06, 0x34, 0x5b,
	0x44, 0x18, 0x30, 0x3f, 0xa4, 0xa8, 0x0d, 0x65, 0x4e, 0xc3, 0xc8, 0x13, 0xe1, 0x86, 0xb6, 0x59,
	0xdc, 0xd1, 0x1b, 0x5b, 0x33, 0x65, 0x64, 0x1d, 0x61, 0x1a, 0x78, 0xae, 0x4d, 0xda, 0x34, 0xb4,
	0xb9, 0x1b, 0x08, 0xc6, 0x9b, 0xcb, 0x49, 0x15, 0x38, 0x83, 0x9a, 0x1f, 0x8a, 0x80, 0x30, 0x0d,
	0x29, 0x3f, 0x25, 0xc2, 0x65, 0x77, 0xdf, 0xe2, 0x00, 0x56, 0xfb, 0x9c, 0x8d, 0xbb, 0x99, 0x05,
	0xd4, 0x96, 0x9e, 0xc7, 0x53, 0x03, 0xf6, 0x39, 0x1b, 0xdf, 0xce, 0x06, 0xd0, 0xcf, 0x28, 0x1c,
	0x34, 0x82, 0x35, 0x29, 0x94, 0xfb, 0xa1, 0x28, 0x95, 0x0e, 0xe2, 0xa9, 0xa1, 0x27, 0x4a, 0xb7,
	0xf5, 0x84, 0xde, 0xcf, 0x49, 0xa4, 0xef, 0x38, 0xf1, 0x07, 0x52, 0x67, 0x79, 0x53, 0xdb, 0x29,
	0x2a, 0xdf, 0xe1, 0x24, 0xf6, 0x1b, 0x1a, 0x29, 0x0e, 0x97, 0x25, 0x69, 0xc7, 0x41, 0xf7, 0x01,
	0x14, 0x7f, 0xe8, 0x4e, 0xe8, 0xc6, 0x4a, 0xa2, 0x80, 0xff, 0x92, 0x91, 0x43, 0x77, 0x42, 0x4d,
	0x0c, 0xff, 0x5e, 0xd9, 0x59, 0xea, 0x88, 0x2a, 0x54, 0xb8, 0x0c, 0x53, 0xf5, 0xa9, 0x55, 0x70,
	0x7e, 0x47, 0x06, 0xe8, 0x8a, 0xd1, 0x66, 0x91, 0x2f, 0xd4, 0x1a, 0xb0, 0x12, 0x69, 0x25, 0x11,
	0xf3, 0xe3, 0x12, 0xfc, 0xdf, 0x52, 0xb6, 0x6b, 0x0d, 0xa9, 0x3d, 0x0a, 0xa3, 0xf1, 0x9d, 0x9b,
	0x61, 0x76, 0x6c, 0x4b, 0x7f, 0x60, 0x6c, 0x27, 0xa0, 0xdb, 0x69, 0xed, 0x99, 0x03, 0x56, 0x9b,
	0x9d, 0xa4, 0x8c, 0xcf, 0x37, 0x75, 0x58, 0x24, 0x5c, 0xcf, 0x8a, 0x22, 0xd7, 0xa9, 0x1f, 0x1d,
	0x75, 0xda, 0x89, 0x4d, 0xb3, 0x69, 0x24, 0x7e, 0xcb, 0xd8, 0x3b, 0x4e, 0x32, 0xec, 0xec, 0x26,
	0x2d, 0xb0, 0x8a, 0xf3, 0xbb, 0x79, 0x0a, 0xf7, 0xe6, 0x46, 0x79, 0xb9, 0xa3, 0x1c, 0xa6, 0x5d,
	0x85, 0xa1, 0xa7, 0x50, 0x09, 0x7d, 0x12, 0x84, 0x43, 0xa6, 0x16, 0xa4, 0x37, 0x1e, 0x2e, 0xfa,
	0xa4, 0x49, 0x5f, 0x1c, 0xa6, 0x69, 0x6d, 0x22, 0x08, 0xce, 0x41, 0x0d, 0x0a, 0xa5, 0x7d, 0x4e,
	0xe9, 0x84, 0xa2, 0xd7, 0x00, 0x97, 0x4f, 0x06, 0xda, 0x5a, 0xb0, 0xb0, 0xb9, 0x67, 0xad, 0xba,
	0x7d, 0x4d, 0x96, 0xea, 0xc0, 0x2c, 0x34, 0x5c, 0xd0, 0x67, 0xec, 0x97, 0x3c, 0xf0, 0xea, 0x4a,
	0xd1, 0x22, 0x8a, 0xf9, 0xd7, 0xa5, 0xfa, 0xe8, 0xba, 0xb4, 0x5c, 0xea, 0x0c, 0xf4, 0x16, 0xf3,
	0x43, 0x37, 0x14, 0xd4, 0xb7, 0xcf, 0xd0, 0x09, 0xfc, 0xf3, 0xd3, 0x60, 0xd1, 0xee, 0x02, 0xae,
	0xc5, 0x3e, 0xae, 0x3e, 0xbe, 0x49, 0x6a, 0x26, 0xdd, 0x7c, 0x70, 0xfe, 0xb5, 0x56, 0x38, 0x8f,
	0x6b, 0xda, 0x45, 0x5c, 0xd3, 0x3e, 0xc5, 0x35, 0xed, 0x4b, 0x5c, 0xd3, 0xde, 0x7f, 0xab, 0x15,
	0x8e, 0xcb, 0x29, 0xb8, 0x57, 0x92, 0x7f, 0x7c, 0x7b, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43,
	0x57, 0xad, 0xba, 0x95, 0x07, 0x00, 0x00,
}
